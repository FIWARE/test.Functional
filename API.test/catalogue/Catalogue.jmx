<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Catalogue" enabled="true">
      <stringProp name="TestPlan.comments">Get GE version from Catalogue</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">catalogue-server.fiware.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">IP of Catalogue, name set in the hosts file</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="List GEs" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1498808539000</longProp>
        <longProp name="ThreadGroup.end_time">1498808539000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getGEs" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/getallges_full/views/getallges_full</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Show GEs details</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">chapter</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..chapter</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">version</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..version</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">rank</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..rank</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getAllGEs_TXT" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Map;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

String header = &quot;All GEs in the catalogue &quot;;
String content = &quot;&quot;;

String key = &quot;&quot;;
int numberGEs = 0;
String postfix, chapter;
for (Map.Entry entry : vars.entrySet()) {
	if (entry.getKey().contains(&quot;title&quot;) &amp;&amp; !(entry.getKey().contains(&quot;matchNr&quot;))){
		postfix = entry.getKey().replaceAll(&quot;title&quot;, &quot;&quot;);	
		chapter = cleanHtmlTags(vars.get(&quot;chapter&quot; + postfix));	
		if (chapter != &quot;&quot; &amp;&amp; !chapter.contains(&quot;Tools&quot;)){	//check if chapter is empty and not &apos;Tools&apos;		
			//content += entry.getKey() + &quot; - &quot; +postfix +&quot;\n&quot;;
			content += &quot;title = &quot; +  cleanHtmlTags(vars.get(&quot;title&quot; + postfix)) + &quot;\n&quot;;
			content += &quot;chapter = &quot; +  cleanHtmlTags(vars.get(&quot;chapter&quot; + postfix)) + &quot;\n&quot;;
			content += &quot;version = &quot; +  vars.get(&quot;version&quot; + postfix) + &quot;\n\n&quot;;
			numberGEs++;
		}		
	}
}

header += &quot;- [totals = &quot; + numberGEs + &quot;]\n\n\n&quot;; 

//path txt file
SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyy-MM-dd_HH-mm-ss&quot; ); 
String datetime = formatter.format( new java.util.Date() );
String file = FileServer.getFileServer().getBaseDir() + &quot;/All_GEs_Catalogue_&quot;+ datetime +&quot;.txt&quot;;

try {
	FileWriter fw = new FileWriter(file,true);
     fw.write(header + content);
     fw.close();
} catch(IOException ioe) {
     System.err.println(&quot;IOException: &quot; + ioe.getMessage());
}

private String cleanHtmlTags(String msg){
	return msg.replaceAll(&quot;\\&lt;[^&gt;]*&gt;&quot;,&quot;&quot;);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">Get list of GEs in TXT</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getAllGEs_CSV" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Map;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

String header = &quot;chapter, title, rank, version\n&quot;;
String content = &quot;&quot;;

String key = &quot;&quot;;
String postfix, chapter;
for (Map.Entry entry : vars.entrySet()) {
	if (entry.getKey().contains(&quot;title&quot;) &amp;&amp; !(entry.getKey().contains(&quot;matchNr&quot;))){
		postfix = entry.getKey().replaceAll(&quot;title&quot;, &quot;&quot;);	
		chapter = cleanHtmlTags(vars.get(&quot;chapter&quot; + postfix));	
		if (chapter != &quot;&quot; &amp;&amp; !chapter.contains(&quot;Tools&quot;)){	//check if chapter is empty and not &apos;Tools&apos;		
			content += cleanHtmlTags(vars.get(&quot;chapter&quot; + postfix)) + &quot;, &quot; + cleanHtmlTags(vars.get(&quot;title&quot; + postfix)) + &quot;, &quot; + cleanHtmlTags(vars.get(&quot;rank&quot; + postfix)) + &quot;, &quot; + removeComma(vars.get(&quot;version&quot; + postfix)) + &quot;\n&quot;;
		}		
	}
}

//path txt file
SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyy-MM-dd HHmmss&quot; ); 
String datetime = formatter.format( new java.util.Date() );
String file = FileServer.getFileServer().getBaseDir() + &quot;/all_ges_&quot;+ datetime +&quot;.csv&quot;;

try {
	FileWriter fw = new FileWriter(file,true);
     fw.write(header + content);
     fw.close();
} catch(IOException ioe) {
     System.err.println(&quot;IOException: &quot; + ioe.getMessage());
}

private String cleanHtmlTags(String msg){
	msg = msg.replaceAll(&quot;&amp;amp;&quot;,&quot;&amp;&quot;);
	return msg.replaceAll(&quot;\\&lt;[^&gt;]*&gt;&quot;,&quot;&quot;);
}

private String removeComma(String msg){
	return msg.replaceAll(&quot;,&quot;,&quot;&quot;);
}

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">Get list of GEs in CVS</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getAllGEs_CSV" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Map;
import java.io.IOException;
import org.apache.jmeter.services.FileServer;
import java.util.Date;
import java.text.SimpleDateFormat;

HashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;();
String postfix, chapter;

for (Map.Entry entry : vars.entrySet() ) {
	if (entry.getKey().contains(&quot;title&quot;) &amp;&amp; !(entry.getKey().contains(&quot;matchNr&quot;))){
		postfix = entry.getKey().replaceAll(&quot;title_&quot;, &quot;&quot;);	
		chapter = cleanHtmlTags(vars.get(&quot;chapter_&quot; + postfix));		
		if (chapter != &quot;&quot; &amp;&amp; !chapter.contains(&quot;Tools&quot;)){	//check if chapter is empty and not &apos;Tools&apos;	
			map.put(Integer.parseInt(postfix), chapter);
		}
	}  
}
HashMap ordered = sortHashMapByValues(map);
StringBuffer output = new StringBuffer(&quot;Chapter, Title, Rank, Version\n&quot;);

for (Map.Entry entry : ordered.entrySet()) {
	output.append(cleanHtmlTags(vars.get(&quot;chapter_&quot; + entry.getKey())) + &quot;, &quot; + cleanHtmlTags(vars.get(&quot;title_&quot; + entry.getKey())) + &quot;, &quot; + cleanHtmlTags(vars.get(&quot;rank_&quot; + entry.getKey())) + &quot;, &quot; + removeComma(vars.get(&quot;version_&quot; + entry.getKey())) + &quot;\n&quot;);
}

//path csv file
SimpleDateFormat formatter = new SimpleDateFormat( &quot;yyyy-MM-dd HHmmss&quot; ); 
String datetime = formatter.format( new java.util.Date() );
String file = FileServer.getFileServer().getBaseDir() + &quot;/all_ges_&quot;+ datetime +&quot;.csv&quot;;

try {
	FileWriter fw = new FileWriter(file,true);
     fw.write(output.toString());
     fw.close();
} catch(IOException ioe) {
     System.err.println(&quot;IOException: &quot; + ioe.getMessage());
}

private String cleanHtmlTags(String msg){
	msg = msg.replaceAll(&quot;&amp;amp;&quot;,&quot;&amp;&quot;);
	return msg.replaceAll(&quot;\\&lt;[^&gt;]*&gt;&quot;,&quot;&quot;);
}

private String removeComma(String msg){
	return msg.replaceAll(&quot;,&quot;,&quot;&quot;);
}

private LinkedHashMap&lt;Integer, String&gt; sortHashMapByValues(HashMap&lt;Integer, String&gt; passedMap) {
    List&lt;Integer&gt; mapKeys = new ArrayList&lt;&gt;(passedMap.keySet());
    List&lt;String&gt; mapValues = new ArrayList&lt;&gt;(passedMap.values());
    Collections.sort(mapValues);
    Collections.sort(mapKeys);

    LinkedHashMap&lt;Integer, String&gt; sortedMap = new LinkedHashMap&lt;&gt;();

    Iterator&lt;String&gt; valueIt = mapValues.iterator();
    while (valueIt.hasNext()) {
        String val = valueIt.next();
        Iterator&lt;Integer&gt; keyIt = mapKeys.iterator();

        while (keyIt.hasNext()) {
            Integer key = keyIt.next();
            String comp1 = passedMap.get(key);
            String comp2 = val;

            if (comp1.equals(comp2)) {
                keyIt.remove();
                sortedMap.put(key, val);
                break;
            }
        }
    }
    return sortedMap;
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="TestPlan.comments">Get list of GEs in CVS</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Result" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
